package ukey

import (
	"bufio"
	"bytes"
	"encoding/binary"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/xxl6097/glog/glog"
	"github.com/xxl6097/go-service/gservice/utils"
	"io"
	"math/big"
	"os"
)

const B = 0x18

var buffer = []byte{0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18}

var key = []byte{0x98, 0xF3, 0x74, 0xED, 0x96, 0xFF, 0x49, 0x3B, 0x22, 0x1E, 0x32, 0xD3, 0xC4, 0xB5, 0xFA, 0xA4, 0xE8, 0x10, 0xC3, 0x30, 0x32, 0x19, 0x7F, 0x4F, 0xA4, 0xBA, 0x8F, 0x76, 0xFD, 0x98, 0xF7, 0x14, 0x6E, 0xF3, 0x65, 0xA4, 0xAE, 0x6A, 0x09, 0x23, 0xA2, 0x1C, 0xDC, 0xE7, 0xC9, 0xF9, 0x24, 0x79, 0x20, 0xC7, 0x46, 0x5E, 0x06, 0x1B, 0x2A, 0xD4, 0xF0, 0x4E, 0x1F, 0x7D, 0xD8, 0xC1, 0x4F, 0xCE, 0x7A, 0x5E, 0x6E, 0x7C, 0xCF, 0x46, 0x91}

const BufferLenType = 4

func GetRawKey() ([]byte, error) {
	newKey, err := DecKey(key)
	if err != nil {
		return nil, err
	}
	return newKey, nil
}

func UnInitializeBuffer() []byte {
	return bytes.Repeat([]byte{B}, len(buffer))
}

func GetBuffer() []byte {
	return buffer
}

func GetCfgBufferFromFile(filePath string) []byte {
	srcFile, err := os.Open(filePath)
	if err != nil {
		glog.Errorf("无法打开文件: %v[%s]", err, filePath)
		return nil
	}
	rawKey, err := GetRawKey()
	if err != nil {
		glog.Errorf("GetRawKey: %v[%s]", err, filePath)
		return nil
	}
	defer srcFile.Close()
	reader := bufio.NewReader(srcFile)
	//var indexSize int64
	cfgBufferSize := len(buffer)
	prevBuffer := make([]byte, 0)
	for {
		thisBuffer := make([]byte, utils.Divide(cfgBufferSize, 1024))
		n, err2 := reader.Read(thisBuffer)
		if err2 != nil && err2 != io.EOF {
			glog.Errorf("读取文件时出错: %v", err2)
			return nil
		}
		//indexSize += int64(n)
		thisBuffer = thisBuffer[:n]
		tempBuffer := append(prevBuffer, thisBuffer...)
		index := bytes.Index(tempBuffer, rawKey)
		if index > -1 {
			glog.Printf("找到位置[%d]了，签名 %s \n", index, filePath)
			tempBuffer1 := tempBuffer[index:]
			if len(tempBuffer1) >= cfgBufferSize {
				return tempBuffer[index : index+cfgBufferSize]
			} else {
				glog.Println("长度缺失，继续...")
			}
		}

		//前一次的+本次的转给 prev
		prevBuffer = tempBuffer[len(prevBuffer):]
		if n == 0 || err2 != nil {
			break // 文件读取完毕
		}
	}
	return nil
}

func Load() ([]byte, error) {
	//获取原始的key
	rawKey, err := GetRawKey()
	if err != nil {
		return nil, err
	}
	//判断buffer中是否存在原始key，如果找不到，说明程序是错误的
	index := bytes.Index(buffer, rawKey)
	if index == -1 {
		return nil, errors.New("程序未初始化～")
	}
	if index != 0 {
		return nil, fmt.Errorf("程序签名不正常:%d", index)
	}
	pos := len(rawKey)
	if len(buffer) < BufferLenType+pos {
		return nil, errors.New("buffer长度不对[读取dataLenBuffer]")
	}
	//获取数据长度字节数组 从原始key后面开始
	dataLenBuffer := buffer[pos : pos+BufferLenType]
	//从原始 key+bufferLenType后面开始
	pos += BufferLenType

	//4个字节转int
	uint32Value := binary.BigEndian.Uint32(dataLenBuffer)
	dataLen := int(uint32Value)
	//如果小于0，说明程序未安装
	if dataLen <= 0 {
		return nil, errors.New("程序未签名～")
	}
	if len(buffer) < dataLen+pos {
		return nil, errors.New("buffer长度不对[读取dataBuffer]")
	}
	//获取配置数据buffer
	configAesBuffer := buffer[pos : pos+dataLen]
	//记住了，构建的时候，要把16字节向量放在原始数据前面，不然这里解析不出来的
	configBuffer, err := utils.DecAES(configAesBuffer[16:], configAesBuffer[:16])
	if err != nil {
		return nil, fmt.Errorf("解密错误:%v", err)
	}
	return configBuffer, nil
}

// GenConfig 只有在计算buffer长度的时候 cap才为true，其他情况一律false
func GenConfig(cfg interface{}, cap bool) ([]byte, error) {
	cfgJsonBytes, err := json.Marshal(cfg)
	//data, err := json.MarshalIndent(cfg, "", "  ")
	if err != nil {
		return nil, fmt.Errorf("json解析cfg错误:%v", err)
	}
	if cfgJsonBytes != nil {
		//glog.Printf("原始配置信息[%d]:%s\n", len(cfgJsonBytes), string(cfgJsonBytes))
	}
	md5Keys := utils.GetUUID()
	cfgBytes, err := utils.EncAES(cfgJsonBytes, md5Keys)
	if err != nil {
		return nil, fmt.Errorf("AES加密cfg错误:%v", err)
	}
	//glog.Printf("加密配置信息[%d]\n", len(cfgBytes))
	rawKey, err := GetRawKey()
	if err != nil {
		return nil, err
	}
	//glog.Printf("原始key信息[%d]:%s\n", len(rawKey), string(rawKey))
	body := make([]byte, 0)
	//body=md5+cfg 配置数据签名必须加md5 16字节值，
	body = append(md5Keys, cfgBytes...)
	if len(body) > len(buffer)-BufferLenType {
		return nil, fmt.Errorf("数据长度【%d】不能大于缓冲区长度【%d】", len(body), len(buffer))
	}
	bodyLen := len(body)
	bodyLenBytes := big.NewInt(int64(bodyLen)).Bytes()
	bodyLenBytes = append(bytes.Repeat([]byte{'\x00'}, BufferLenType-len(bodyLenBytes)), bodyLenBytes...)
	glog.Printf("body信息长度：%d，占字节数：%v\n", bodyLen, bodyLenBytes)

	//data=bodyLen+body
	data := append(bodyLenBytes, body...)
	//data=rawkey+bodyLen+body 终极形态数据
	data = append(rawKey, data...)
	dataLen := len(buffer)
	size := len(data)
	//glog.Println("原始bffer大小", size)
	if cap {
		dataLen = size + size/3
	}
	if size < dataLen {
		tempBytes := bytes.Repeat([]byte{B}, dataLen-size)
		data = append(data, tempBytes...)
	}

	//glog.Println("扩展bffer大小", len(data))
	return data, nil
}

func genKey(key, sec []byte) []byte {
	b1 := utils.PrintByteArrayAsConstant(key)
	glog.Printf("var buffer-%d = %s\n", len(b1), b1)
	//wstext := utils.BytesToHexEscape(key)
	//glog.Printf("var buffer1 = \"%s\"\n", wstext)
	md5KeyBytes, _ := utils.GetMD5(sec)
	data, err1 := utils.EncAES(key, md5KeyBytes)
	if err1 != nil {
		panic(err1)
	}
	data = append(md5KeyBytes, data...)
	return data
}

func DecKey(data []byte) ([]byte, error) {
	jie, err := utils.DecAES(data[16:], data[:16])
	if err != nil {
		return nil, fmt.Errorf("decrypt key error: %v", err)
	}
	return jie, nil
}

func TestKey() {
	key1 := "你是我的宝贝，我的阿胖宝～"
	sec2 := "我是你的宝贝，你的大福宝～"
	b := genKey([]byte(key1), []byte(sec2))
	b1 := utils.PrintByteArrayAsConstant(b)
	glog.Printf("var key = %s\n", b1)
	//b2 := DecKey(b)
	//b3 := utils.PrintByteArrayAsConstant(b2)
	//glog.Printf("var buffer = %s\n", b3)
}

func GenSign(raw, key []byte) {
	b := genKey(raw, key)
	b1 := utils.PrintByteArrayAsConstant(b)
	glog.Printf("var key-%d = %s\n", len(b1), b1)
}

type ClientCommonConfig struct {
	Addr  string `json:"addr"`
	Port  int    `json:"port"`
	User  string `json:"user"`
	Token string `json:"token"`
}
